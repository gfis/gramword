/*  Shows the syntactical type of words in plain text
    @(#) $Id: GrammarFilter.java 36 2008-09-08 06:05:06Z gfis $
    2008-04-01: style.js incorporated
    2007-02-21: general parts extracted to BaseFilter
    2007-02-14: refactored for teherba.org
    2006-08-02: strategies prsplit, sasplit
    2006-07-21: MorphemTester instead of Classificator
    2006-05-31: copied from NumberSpeller
    must be stored in UTF-8 encoding äöüÄÖÜß!
*/
/*
 * Copyright 2006 Dr. Georg Fischer <punctum at punctum dot kom>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.teherba.gramword;
import  org.teherba.gramword.BaseFilter;
import  org.teherba.gramword.Morphem;
import  org.teherba.gramword.MorphemTester;
import  java.io.BufferedReader;
import  java.io.Reader;
import  java.io.PrintWriter;
import  java.text.DecimalFormat;
import  java.util.Iterator;
import  java.util.regex.Pattern;
import  java.util.TreeMap;
import  org.apache.log4j.Logger;

/** Shows the syntactical type of words in plain text. 
 *  @author Dr. Georg Fischer
 */
public class GrammarFilter extends BaseFilter { 
    public final static String CVSID = "@(#) $Id: GrammarFilter.java 36 2008-09-08 06:05:06Z gfis $";

    /** log4j logger (category) */
    protected Logger log;

    /** No-args Constructor
     */
    public GrammarFilter() {
        super();
        log = Logger.getLogger(GrammarFilter.class.getName());
    } // constructor

    /** Writes the header of the output file
     *  (in case of HTML a head element with style declarations)
     *  @param writer writer to be used for output
     *  @param title text to be written over the main column
     *  @param mode output mode: html, text, dict
     */
    private void putHeader(PrintWriter writer, String mode, String title) { 
        String path = "file:///C|/var/www/teherba.org/gramword/web/"; // if not run in servlet container
        path = ""; // relative .css file paths in servlet container
        try {
            if (false) {
            } else if (mode.equals("html")) {
                writer.println("<?xml version=\"1.0\"?>");
                writer.println("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"");
                writer.println("\t\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"");
                writer.println("<html xmlns=\"http://www.w3.org/1999/xhtml\">");
                writer.println("<head>");
                writer.println("<!-- automatically generated by GrammarFilter.java - do not edit here! -->");
                writer.println("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />");
                writer.println("<title>Colored words</title>");
                writer.println("<link rel=\"stylesheet\" title=\"all\"    type=\"text/css\" href=\"" + path + "stylesheet.css\" />");
                writer.println("<link rel=\"stylesheet\" title=\"vbav\"   type=\"text/css\" href=\"" + path + "vbav.css\"   />");
                writer.println("<link rel=\"stylesheet\" title=\"sbajar\" type=\"text/css\" href=\"" + path + "sbajar.css\" />");
                writer.println("<link rel=\"stylesheet\" title=\"nmnu\"   type=\"text/css\" href=\"" + path + "nmnu.css\"   />");
                writer.println("<link rel=\"stylesheet\" title=\"prcj\"   type=\"text/css\" href=\"" + path + "prcj.css\"   />");
            	writer.println("<script type=\"text/javascript\" src=\"" + path + "script.js\">");
				writer.println("</script>");
            /*
                writer.println("<script type=\"text/javascript\">");
				writer.println("<!--");
				writer.println("function setActiveStyleSheet(title) {");
				writer.println("    var i, a;");
				writer.println("    for (i = 0; (a = document.getElementsByTagName(\"link\")[i]); i ++) {");
				writer.println("        if (a.getAttribute(\"rel\").indexOf(\"style\") != -1 && a.getAttribute(\"title\")) {");
				writer.println("            a.disabled = true;");
				writer.println("            if (a.getAttribute(\"title\") == title) {");
				writer.println("                a.disabled = false;");
				writer.println("            }");
				writer.println("        }");
				writer.println("    } // for i");
				writer.println("}");
				writer.println("-->");
                writer.println("</script>");
			*/	
                writer.println("</head>");
                writer.println("<body>");
                writer.println("<table><tr><th width=\"85%\" align=\"left\">" + title + "</th>");
                writer.println("<th align=\"left\">Morphem Codes</th></tr>");
                writer.println("<tr><td>");
            } else if (mode.equals("dict")) {
            } else if (mode.equals("text")) {
            } else {
                System.err.println("invalid mode \"" + mode + "\" - abort");
            }
        } catch (Exception exc) {
            log.error(exc.getMessage(), exc);
        }
    } // putHeader
    
    /** Writes the trailer of the output file
     *  (with statistics information)
     *  @param writer writer to be used for output
     *  @param mode output mode: html, text, dict
     */
    private void putTrailer(PrintWriter writer, String mode) {
        try {
            DecimalFormat form = (DecimalFormat) DecimalFormat.getInstance(); 
            form.applyPattern("##0.0");
            if (false) {
            } else if (mode.equals("html")) {
                writer.println("</td><td>highlight:<br />");
                writer.println("<a href=\"\" onclick=\"setActiveStyleSheet('all');    return false;\">all found</a><br />");
                writer.println("<a href=\"\" onclick=\"setActiveStyleSheet('vbav');   return false;\">Vb+Av</a><br />");
                writer.println("<a href=\"\" onclick=\"setActiveStyleSheet('sbajar'); return false;\">Sb+Aj+Ar</a><br />");
                writer.println("<a href=\"\" onclick=\"setActiveStyleSheet('nmnu');   return false;\">Nm+Nu</a><br />");
                writer.println("<a href=\"\" onclick=\"setActiveStyleSheet('prcj');   return false;\">Pr+Cj+Cc+Un</a><br />");
                writer.println("<table>");
                writer.println("<tr><td>total</td><td align=\"right\">" + cntWords + "</td></tr>"); 
                writer.println("<tr><td>known</td><td align=\"right\">" + cntKnown + "</td></tr>"); 
                writer.println("<tr><td>=</td><td align=\"right\"><strong>" 
                        + form.format(cntKnown * 100.0 / cntWords) + "%</strong></td></tr>");
                Iterator iter = morphCounts.keySet().iterator();
                while (iter.hasNext()) {
                    String morph = (String) iter.next();
                    int count = ((Integer) morphCounts.get(morph)).intValue(); 
                    writer.println("<tr><td><span class=\"" + morph + "\">" + morph 
                            + "</span></td><td align=\"right\">" + count + "</td></tr>"); 
                } // while iter
                writer.println("</table>");
                writer.println("</td></tr></table>");
                writer.println("</body>");
                writer.println("</html>");
            } else if (mode.equals("dict")) {
            } else if (mode.equals("text")) {
            } else {
                // System.err.println("invalid mode \"" + mode + "\" - abort");
            }
        } catch (Exception exc) {
            log.error(exc.getMessage(), exc);
        }
    } // putTrailer
    
    /** Evaluates a line of words.
     *  @param line string containing segments, i.e. words and 
     *  separators (whitespace, punctuation).
     *  @param writer writer to be used for output
     *  @param mode output mode: html, text, dict
     */
    public void processLine(String line, PrintWriter writer, String mode) {
        try {
            String[] segments = wordBoundary.split(line);
            if (segments.length <= 1) { // line with 1 word or 1 punctuation string only
                sentenceStart = true;
            }
            for (int isegm = 0; isegm < segments.length; isegm ++) {
                String segment = segments[isegm];
                if (wordStart.matcher(segment).lookingAt()) { // word
                    Morphem morphem = tester.test(segment);
                    if (morphem != null && morphem.getMorph() != null) {
                        if (debug >= 2) {
                            log.info("# " + morphem.toString());
                            log.debug(""); // empty line
                        }
                        String wordClass = morphem.getMorph();
                        String morphCode = wordClass.substring(0, 2);
                        if (false) {
                        } else if (mode.equals("html")) {
                            writer.print("<span class=\"" 
                                    + morphCode
                                    + "\" morph=\"" 
                                    + wordClass.substring(morphCode.length())
                                    + "\">");
                            writer.print(segment);
                            writer.print("</span>");
                        } else if (mode.equals("dict")) {
                            writer.println(morphem.toString().substring(1)
                                    .replaceAll(" ", "    \t").replace("}", ""));
                            writer.flush(); // for steady output
                        } else if (mode.equals("text")) {
                            writer.print(morphem.toString());
                        }
                        cntKnown ++;
                        morphIncr(morphCode);
                    } else {
                        if (false) {
                        } else if (mode.equals("html")) {
                            writer.print(segment);
                        } else if (mode.equals("dict")) {
                            // unrecognized words are not output in 'dict' mode
                        } else if (mode.equals("text")) {
                            writer.print(segment);
                        }
                    }
                    sentenceStart = false;
                    cntWords ++;
                } // if word
                else { // whitespace + punctuation
                    if (false) {
                    } else if (mode.equals("html")) {
                        writer.print(segment);
                    } else if (mode.equals("dict")) {
                    } else if (mode.equals("text")) {
                        writer.print(segment);
                    }
                    if (sentenceTerminator.matcher(segment).find()) { 
                        sentenceStart = true;
                        if (false) {
                        } else if (mode.equals("html")) {
                            writer.println("<br />");
                        } else if (mode.equals("dict")) {
                        } else if (mode.equals("text")) {
                            writer.println("");
                        }
                    }
                } // whitespace + punctuation
            } // for isegm
            
            if (false) {
            } else if (mode.equals("html")) {
                writer.println(" "); // connect lines by 1 space
            } else if (mode.equals("dict")) {
            } else if (mode.equals("text")) {
                writer.println(" "); // connect lines by 1 space
            }
        } catch (Exception exc) {
            log.error(exc.getMessage(), exc);
        }
    } // processLine
    
    /** Processes the input file and writes to the output stream
     *  @param args arguments from the commandline
     */
    public void process(String[] args) {                
        try {       
            int iarg = 0; // index for command line arguments
            StringBuffer title = new StringBuffer(128);
            while (iarg < args.length) {
                title.append(args[iarg ++]);
                title.append(" ");
            } // while arguments

            String line = null; 
            putHeader(writer, mode, title.toString());
            tester = new MorphemTester(strategy);
            sentenceStart = true;
            BufferedReader buffReader = new BufferedReader(reader);
            while ((line = buffReader.readLine()) != null) {
                processLine(line, writer, mode);
            } // while busy 
            putTrailer(writer, mode);
            // writer.close();
            buffReader.close();
            tester.destroy();
        } catch (Exception exc) {
            log.error(exc.getMessage(), exc);
        }
    } // process
    
    /** Creates a filter, gets all options from the commandline
     *  and processes the input file accordingly
     *  @param args commandline arguments (see <em>BaseFilter.getOptions</em>)
     */
    public static void main(String args[]) {
        GrammarFilter filter = new GrammarFilter();
        filter.getOptions(args);
        filter.process(args);
        filter.getWriter().close();
    } // main

} // GrammarFilter
